роЗродрпБ роТро░рпБ рокрпЖро░ро┐роп MongoDB documentation section. роЗродрпБро▓ **Replication**, роЕродро╛ро╡родрпБ **Replica Set** рокро▒рпНро▒ро┐ роорпБро┤рпБроорпИропро╛роХ рокрпЗроЪрпБро▒ро╛роЩрпНроХ.

роиро╛ройрпН роЗрокрпНрок роЕродрпИ **родрпБро▓рпНро▓ро┐ропрооро╛**, **родрооро┐ро▓рпНро▓**, **рокрпКродрпБро╡ро╛ ропро╛ро░рпБроХрпНроХрпБроорпН рокрпБро░ро┐ропрпБрооро╛ро▒ро┐**, **step-by-step** explain рокрогрпНрогрпНро▒рпЗройрпН.

---

## ЁЯФБ **Replication тАУ MongoDB-ро▓ Data Copying Mechanism (родрооро┐ро┤ро┐ро▓рпН)**

### ЁЯФ╣ **Replica Set роОройрпНрой?**

Replica Set роОройрпНро▒ро╛ро▓рпН, роЗродрпБ роТро░рпБ **MongoDB server group**. роЕродро╛ро╡родрпБ, рокро▓ `mongod` instances (servers) роЪрпЗро░рпНроирпНродрпБ роТро░рпБ роХрпБро┤рпБро╡ро╛ ро╡рпЗро▓рпИ роЪрпЖропрпНропрпБроорпН.

* роЗроирпНрод роХрпБро┤рпБ роОро▓рпНро▓ро╛ server-роХрпНроХрпБроорпН **роЕродрпЗ data** роЗро░рпБроХрпНроХ рооро╛родро┐ро░ро┐ роХро╛рокрпНрокро┐ роОроЯрпБродрпНродрпБ ро╡рпИродрпНродро┐ро░рпБроХрпНроХрпБроорпН.
* роЗродрпБроХрпНроХрпБ рокрпЖропро░рпН: **Replication** (роироХро▓рпЖроЯрпБроХрпНроХрпБроорпН роЪрпЖропро▓рпНроорпБро▒рпИ)

---

### ЁЯОп **Replica Set-роР роПройрпН Use рокрогрпНрогрогрпБроорпН?**

Replica Set use рокрогрпНрогрпБроорпНрокрпЛродрпБ MongoDB-роХрпНроХрпБ роХро┐роЯрпИроХрпНроХрпБроорпН рокропройрпНроХро│рпН:

#### тЬЕ 1. **Redundancy (роорпАро│рпНроироХро▓рпН роЗро░рпБрокрпНрокродрпБ)**

> роТро░рпБ server down роЖройро╛ро▓рпБроорпН, рооро▒рпНро▒ server-ро▓ backup роЗро░рпБроХрпНроХрпБ!

#### тЬЕ 2. **High Availability (роЕрокрпНрокро╛роЯро┐... Server crash роЖройро╛ро▓рпБроорпН service continue роЖроХрпБроорпН!)**

> роТро░рпБ server offline роЖройро╛ро▓рпБроорпН, рооро▒рпНро▒ server-роР роХрпКрогрпНроЯрпБ app continue роЪрпЖропрпНропро▓ро╛роорпН.

#### тЬЕ 3. **Read Scalability**

> Read request-роР роОро▓рпНро▓ро╛ server-роХрпНроХрпБроорпН share рокрогрпНрогро▓ро╛роорпЗ!

---

### ЁЯФ╕ **Replica Set-ро▓ роОройрпНрой роЗро░рпБроХрпНроХрпБроорпНройрпБ рокро╛родрпНродрпАроЩрпНроХройро╛:**

#### ЁЯзй **Main Components:**

| Role               | Explanation                                                                  |
| ------------------ | ---------------------------------------------------------------------------- |
| ЁЯЯв **Primary**     | Main server тАУ роОро▓рпНро▓ро╛ write operations роЗроЩрпНроХ родро╛ройрпН рокрпЛроХрпБроорпН                        |
| ЁЯЯб **Secondaries** | Primary-ро╡рпИ copy рокрогрпНрогрпБроорпН servers тАУ роЗро╡роЩрпНроХ Read requests-роР handle рокрогрпНрогро▓ро╛роорпН      |
| тЪк **Arbiter**      | Vote роороЯрпНроЯрпБроорпН рокрпЛроЯрпБро╡ро╛ройрпН, роЖройро╛ data ро╡рпИроЪрпНроЪро┐ро░рпБроХрпНроХ рооро╛роЯрпНроЯро╛ройрпН. (Low cost setup-роХрпНроХро╛роХ) |

---

### ЁЯЫая╕П **Replication роОрокрпНрокроЯро┐ ро╡рпЗро▓рпИ роЪрпЖропрпНропрпБродрпБ?**

1. **Primary** node-ро▓ data роОро┤рпБродрпБро▒рпЛроорпН (Write).
2. роЗроирпНрод changes `oplog` (operation log) роОройрпНроХро┐ро▒ log-ро▓ роЪрпЗро░рпБроорпН.
3. **Secondary** nodes роЕроирпНрод `oplog`-роР copy рокрогрпНрогро┐, роЕро╡роЩрпНроХ data-ро▓ роЕродрпЗ change-роР update рокрогрпНрогрпБроорпН.
4. роЗродрпБ asynchronous (роЕродро╛ро╡родрпБ роТро░рпБ роЪро┐ройрпНрой delay-роХрпНроХрпБ рокро┐ройрпНройро╛ро▓рпЗ update роЖроХрпБроорпН).

---

### тЪая╕П **Important Rule**

> роТро╡рпНро╡рпКро░рпБ node-роЙроорпН **роТро░рпЗ роТро░рпБ Replica Set-роХрпНроХрпБ роороЯрпНроЯрпБроорпН родро╛ройрпН роЪрпЗро░рпНроирпНродро┐ро░рпБроХрпНроХрогрпБроорпН**
> роТро░рпБ server роЗро░рогрпНроЯрпБ Replica Set-ро▓ роЪрпЗро░ роорпБроЯро┐ропро╛родрпБ.

---

## ЁЯФБ **Failover (Automatic election):**

> Primary server crash роЖройро╛ роОройрпНрой роЖроХрпБроорпН?

* MongoDB роТроЯрпНроЯрпБроорпКродрпНрод Replica Set-роР healthy-роЖ maintain рокрогрпНрогройрпБроорпН.
* роЕродрпБроХрпНроХро╛роХ, **Election** process роироЯроХрпНроХрпБроорпН.
* роТро░рпБ eligible secondary роЙроЩрпНроХ vote-роР роХрпЗроЯрпНроЯрпБрокрпН primary роЖроХрпБроорпН.

тП▒я╕П **Default timeout**: 10 seconds
тП▓я╕П Election time usually: \~12 seconds

---

### ЁЯФД **Replication Lag тАУ роЕро╡роЪро░рооро╛рой ро╡ро┐ро╖ропроорпН!**

**Lag** = Primary-ро▓ роироЯроирпНрод write, Secondary-ро▓ reflect роЖроХрпБро▒родрпБ delay роЖроХрпБро▒родрпБ.

* роЗродрпБ роЕродро┐роХрооро╛ роЗро░рпБроирпНродро╛:

  * Primary overload роЖроХрпБроорпН
  * Users inconsistent data рокро╛роХрпНроХро▓ро╛роорпН

ЁЯШМ роЗродрпИ control рокрогрпНрог `Flow Control` mechanism роЗро░рпБроХрпНроХрпБ.

---

### ЁЯФО **Read Operations тАУ роОрокрпНрокроЯро┐ Read роЪрпЖропрпНропро▓ро╛роорпН?**

By default, Read **Primary**-ро▓ роЗро░рпБроирпНродрпБ родро╛ройрпН ро╡ро░рпБроорпН.
роЖройро╛ роирпАроЩрпНроХ settings-ро▓ рокрогрпНрогро┐ройро╛, **Secondary**-ро▓ роЗро░рпБроирпНродрпБ Read рокрогрпНрогро▓ро╛роорпЗ:

> тЪая╕П Secondary-ро▓ Read рокрогрпНрогрпБроорпНрокрпЛродрпБ роЪро┐ро▓ data **latest роЗро▓рпНро▓ро╛рооро▓рпН** роЗро░рпБроХрпНроХро▓ро╛роорпН!

---

### ЁЯза **Mirrored Reads тАУ Cache Warming Strategy**

* Primary server, роЪро┐ро▓ read requests-роР copy рокрогрпНрогро┐, Secondary-роХрпНроХрпБ роЕройрпБрокрпНрокрпБроорпН (fire-and-forget).
* роЗродрпБро▓ result роХрпЗроЯрпНроЯ рооро╛родро┐ро░ро┐ роЗро▓рпНро▓рпИ, cache warming-роХрпНроХро╛роХ роороЯрпНроЯрпБроорпН.
* Example: Pre-warming cache after failover.

Default: 1% (sampling rate = 0.01)
Change рокрогрпНрогро▓ро╛роорпН using `mirrorReads` parameter.

---

### ЁЯФД **Transactions & Read Consistency:**

* Replica Set-ро▓ **Multi-document Transactions** possible.
* Read Preference = `primary` родро╛ройрпН роЗро░рпБроХрпНроХрогрпБроорпН.
* Transaction commit роЖроХрпБроорпНро╡ро░рпИ data ро╡рпЖро│ро┐ро▓ родрпЖро░ро┐ропро╛родрпБ.

---

### ЁЯФФ **Change Streams**:

* Real-time changes-роР app-роХрпНроХрпБ stream рокрогрпНрог роорпБроЯро┐ропрпБроорпН.
* Oplog-роР tail рокрогрпНрог родрпЗро╡рпИропро┐ро▓рпНро▓рпИ.

---

### ЁЯзк **Slow Oplog Operations**

* Secondary-ро▓рпН, slow-роЖ apply роЖроХрпБро▒ operations log рокрогрпНрогрокрпНрокроЯрпБроорпН.
* роЗродрпБ performance debug-роХрпНроХрпБ роЙродро╡рпБроорпН.

---

### ЁЯз░ **Replica Set Setup Options**

* Delay member
* Hidden member
* Priority 0 member
* Multi-datacenter deployment

---

## тЬЕ Summary Table тАУ родрооро┐ро┤рпНро▓ MongoDB Replica Set

| Feature         | Description (Tamil)                                                  |
| --------------- | -------------------------------------------------------------------- |
| Replica Set     | MongoDB-ропро┐ро▓рпН redundancy & availability роХрпКроЯрпБроХрпНроХ server group          |
| Primary         | Write рокрогрпНрогрпБроорпН main node                                              			|
| Secondary       | Copy роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро╡родрпБ                                            				 	   |
| Arbiter         | Vote роороЯрпНроЯрпБроорпН рокрогрпНрогрпБроорпН (data роЗро▓рпНро▓)                                    		 |
| Failover        | Primary unavailable роЖройро╛ automatic-a new primary родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпБроорпН |
| Flow Control    | Lag-роР родро╡ро┐ро░рпНроХрпНроХ write speed-роР control рокрогрпНрогрпБроорпН                         |
| Mirrored Reads  | Secondary-роХрпНроХрпБ cache warm рокрогрпНрог Read mirror                           |
| Read Preference | Read роОроЩрпНроХро┐ро░рпБроирпНродрпБ ро╡ро░рогрпБроорпН роОрой control                                   |
| Transaction     | Replica Set-ро▓ full ACID supported transactions                       |
| Change Streams  | Real-time update notifications                                       |

---

ЁЯУМ **Next Step:**
роирпАроЩрпНроХ роЗродро┐ро▓рпН роОроирпНрод section-роР deep-роЖ ро╡ро┐ро│роХрпНроХроорпН ро╡рпЗрогрпБроорпНройрпБ роЪрпКройрпНройро╛, роЕродрпИрокрпН рокро┐ро░ро┐роЪрпНроЪрпБ, code example + real-world scenario-роУроЯ explain рокрогрпНрогро┐ родро░рпНро▒рпЗройрпН.

роЙроЩрпНроХро│рпБроХрпНроХрпБ роЗрокрпНрок ро╡ро░рпИроХрпНроХрпБроорпН роОро▓рпНро▓ро╛роорпН рокрпБро░ро┐роЮрпНроЪродро╛? роОроирпНрод section-ро▓ роЗройрпНройрпБроорпН clarity ро╡рпЗрогрпБроорпН?


роЗроирпНрод **Replica Set Oplog** concept роОройрпНрокродрпБ **MongoDB replication** ро╡рпЗро▓рпИ роЪрпЖропрпНро╡родро▒рпНроХро╛рой роЕроЯро┐рокрпНрокроЯрпИ mechanism роЖроХрпБроорпН. роЗродрпИрокрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро╡родрпБ роорпБроХрпНроХро┐ропроорпН, роПройрпЖройрпНро▒ро╛ро▓рпН роЗродрпБ replication lag, data consistency, рооро▒рпНро▒рпБроорпН failover situations-роР handle рокрогрпНрогрпБродрпБроХрпНроХрпБ роорпБроХрпНроХро┐ропрооро╛рой рокроЩрпНроХрпБ ро╡роХро┐роХрпНроХрпБродрпБ.

---

## ЁЯФБ **Replica Set Oplog тАФ родрпЖро│ро┐ро╡ро╛рой ро╡ро┐ро│роХрпНроХроорпН (Tamil + English)**

### ЁЯФ╕ 1. **Oplog роОройрпНрой? (What is Oplog?)**

* **Oplog** роОройрпНрокродрпБ `local.oplog.rs` collection-ро▓ роЗро░рпБроХрпНроХрпБро▒ роТро░рпБ **capped collection**.
* роЗродрпБ **write operations history-роР** роЪрпЗрооро┐роХрпНроХрпБродрпБ.
* роЗродрпБ **primary node-ро▓ роороЯрпНроЯрпБроорпН роОро┤рпБродрокрпНрокроЯрпБроорпН** (write operations only recorded in primaryтАЩs oplog).
* рокро┐ро▒роХрпБ, роЗроирпНрод operations-роР **secondary nodes copy рокрогрпНрогро┐ apply рокрогрпНрогрпБроорпН** (asynchronously).

тЬЕ **Note**: Only successful and data-modifying operations are recorded. Failures/No change = No entry.

---

### ЁЯФ╕ 2. **Oplog роОрокрпНрокроЯро┐ ро╡рпЗро▓рпИ роЪрпЖропрпНропрпБродрпБ?**

1. Primary-ро▓ роТро░рпБ document update/insert/delete роЖроХрпБродрпБ.
2. роЕроирпНрод operation primary-ро╡ро┐ро▓рпЗропрпЗ execute роЖроХрпБроорпН.
3. роЕродрпБ рокро┐ро▒роХрпБ `local.oplog.rs` collection-ро▓ append роЖроХрпБроорпН.
4. Secondary nodes роЕроирпНрод oplog entries-роР copy рокрогрпНрогро┐, **роЕродрпЗ operations-роР apply рокрогрпНрогрпБроорпН**.

тЮбя╕П **Asynchronous replication** тАФ so secondaries lag рокрогрпНрогро▓ро╛роорпН (controlled by Oplog Window).

---

### ЁЯФ╕ 3. **Oplog Characteristics**

* **Idempotent**: роТро░рпЗ operation 10 родроЯро╡рпИ apply рокрогрпНрогро┐ройро╛ро▓рпБроорпН роТро░рпЗ result ро╡ро░рпБроорпН (safe retry).
* **Capped Collection**: Size-роХрпЗро▒рпНрок rotate роЖроХрпБроорпН, рокро┤рпИропро╡рпИроХро│рпН truncate роЖроХрпБроорпН.
* WiredTiger uses this for replication *and* crash recovery.

---

### ЁЯФ╕ 4. **Oplog Size тАФ роОро╡рпНро╡ро│ро╡рпБ space ро╡ро╛роЩрпНроХрпБроорпН?**

ЁЯзо Default Size (First time startup):

| OS / Engine          | Default Size          |
| -------------------- | --------------------- |
| Unix + WiredTiger    | 5% of Free Disk Space |
| Unix + In-Memory     | 5% of Physical RAM    |
| 64-bit macOS         | 192 MB                |
| **Min Size**         | 990 MB                |
| **Max Default Size** | 50 GB                 |

* тП▒я╕П **Oplog Window** = Latest Entry Time - Oldest Entry Time
* роЗродрпБ роОроирпНрод secondary node-роорпН роОро╡рпНро╡ро│ро╡рпБ роирпЗро░роорпН lag-роЖ irundhaalрпБроорпН sync роЪрпЖропрпНроп роорпБроЯро┐ропрпБроорпН роОройрпНрокродрпИ define рокрогрпНрогрпБроорпН.

тЬЕ You can **manually set size**:

* At startup: `--oplogSizeMB`
* Runtime: `db.adminCommand({ replSetResizeOplog: 1, size: <MB> })`

---

### ЁЯФ╕ 5. **Minimum Retention Period**

You can tell MongoDB:
тЭЧ тАЬ**роЗроирпНрод many hours-роХрпНроХрпБро│рпНро│ родро╛ройрпН truncate рокрогрпНрогро┐роХрпНроХрпЛ**тАЭ by:

* Config File: `storage.oplogMinRetentionHours`
* Command Line: `--oplogMinRetentionHours`
* Runtime: Use `replSetResizeOplog`

Truncation only happens if:

1. Size limit reached **AND**
2. Entry is older than retention hours.

---

### ЁЯФ╕ 6. **Workload Impact (When to Increase Oplog Size)**

If your app does one of the following, use **larger oplog**:

1. **Multi-document updates** тАУ More oplog entries.
2. **Equal Inserts and Deletes** тАУ More operation history.
3. **Frequent in-place updates** тАУ Document size doesnтАЩt grow, but oplog size does.

---

### ЁЯФ╕ 7. **Oplog Status Monitor Commands**

```js
rs.printReplicationInfo()      // Time range and size
db.getReplicationInfo()        // Oplog size, used bytes
```

---

### ЁЯФ╕ 8. **Replication Lag and Flow Control**

* Lag роЗро░рпБроХрпНроХро╛роо роЗро░рпБроХрпНроХ flow control help рокрогрпНрогрпБроорпН.
* Parameter: `flowControlTargetLagSeconds`
* Slow oplog apply роЖройро╛ро▓ро╛ log message ро╡ро░рпБроорпН:

  ```
  applied op: {...}, took 112ms
  ```

---

### ЁЯФ╕ 9. **Restrictions and Notes**

* **local.oplog.rs** collection-роР drop рокрогрпНрог роорпБроЯро┐ропро╛родрпБ (WiredTiger/Replica set).
* MongoDB 5.0-ро▓рпН роЗро░рпБроирпНродрпБ **manual writes** to the oplog not allowed in replica set.
* Only for internal replication use.

---

## тЬЕ **Most Important Interview/Real-time Concepts:**

| Topic                          | Importance                |
| ------------------------------ | ------------------------- |
| Oplog Concept                  | Core to replication       |
| Idempotency                    | Ensures safe retries      |
| Oplog Size and Retention       | Prevents replication lag  |
| rs.printReplicationInfo()      | Quick health check        |
| Multi-update = multi oplog ops | Oplog fills faster        |
| Oplog Window                   | Determines sync viability |

---

роирпАроЩрпНроХ MongoDB Replica Set роиро▓рпНро▓ро╛ рокрпБро░ро┐роЮрпНроЪрпБ manage рокрогрпНрогрогрпБроорпНройро╛, **oplog** concept-роР роорпБро┤рпБроорпИропро╛роХ рокрпБро░ро┐роЮрпНроЪро┐ро░рпБроХрпНроХрогрпБроорпН.

ро╡рпЗро▒ роОроирпНрод Replica Set related topic-роР роирпАроЩрпНроХ next рокрпБро░ро┐роЮрпНроЪро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпНройрпБ ро╡ро┐ро░рпБрокрпНрокроорпН роЗро░рпБроХрпНроХро╛?

